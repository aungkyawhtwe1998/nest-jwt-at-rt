// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  email     String   @unique
  username  String   @default("")
  hash      String
  hashedRt  String?
  todos     Todo[]
  company   Company?

  @@map("users")
}

model Company {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  name              String    @default("Default")
  address           String    @default("Default")
  imageUrl          String    @default("")
  serviceChargeRate Int       @default(0)
  taxRate           Int       @default(0)
  currency          String    @default("à¸¿")
  coverPhoto        String    @default("")
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id])
  locations         Locaton[]

  @@map("companies")
}

model Locaton {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  name           String         @default("Default")
  companyId      Int
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  menuCategories MenuCategory[]

  @@map("locations")
}

model MenuCategory {
  id         Int        @id @default(autoincrement())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  sortIndex  Int        @default(0)
  locationId Int
  location   Locaton    @relation(fields: [locationId], references: [id])
  menuItems  MenuItem[]

  @@map("menuCategories")
}

model MenuItem {
  id             Int          @id @default(autoincrement())
  name           String
  price          Int
  discount       Int
  imageUrl       String
  createdAt      DateTime     @default(now())
  description    String
  updatedAt      DateTime     @default(now())
  menuCategoryId Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])

  @@map("menuItems")
}

model Todo {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String     @unique
  description String?
  status      TodoStatus @default(OPEN)
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

enum TodoStatus {
  OPEN
  IN_PROGRESS
  DONE
}
